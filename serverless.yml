service: random-recall
frameworkVersion: ">=3.38.0 <4.0.0"

custom:
  credentialsProfile: heap
  region: eu-west-1
  secret: ${file(secrets.yml)}

provider:
  name: aws
  runtime: nodejs20.x
  region: ${self:custom.region}
  profile: ${self:custom.credentialsProfile}
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:ListBucket
          Resource:
            - !GetAtt PhotoBucket.Arn
        - Effect: Allow
          Action:
            - s3:GetObject
          Resource:
            Fn::Join:
              - ""
              - - Fn::GetAtt: PhotoBucket.Arn
                - "/photos-bot-can-send/*"
  environment:
    BUCKET_NAME: !Ref PhotoBucket
    TELEGRAM_BOT_AUTH_TOKEN: ${self:custom.secret.telegram_bot_auth_token}
    TELEGRAM_CHAT_ID: ${self:custom.secret.telegram_chat_id}
    TELEGRAM_EXPECTED_CHAT_ADMIN_ID: ${self:custom.secret.telegram_expected_chat_admin_id}
    TELEGRAM_EXPECTED_CHAT_ADMIN_USERNAME: ${self:custom.secret.telegram_expected_chat_admin_username}
    TELEGRAM_EXPECTED_CHAT_MEMBER_COUNT: ${self:custom.secret.telegram_expected_chat_member_count}

functions:
  sendPhotoToTelegram:
    handler: src/index.handler
    memorySize: 128
    timeout: 20
    events:
      - schedule: cron(00 6 ? * MON,THU *)

resources:
  Resources:
    PhotoBucket:
      Type: AWS::S3::Bucket
      Properties:
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true

package:
  patterns:
    - "!*"
    - "src/*.mjs"
